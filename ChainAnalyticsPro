# ChainAnalyticsPro.py

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import requests
from datetime import datetime
from typing import Dict, Any

class ChainAnalyticsPro:
    def __init__(self, api_base_url: str):
        self.api_base_url = api_base_url
        self.data = pd.DataFrame()

    def fetch_blockchain_data(self, blockchain_name: str) -> Dict[str, Any]:
        """
        Fetch data for a specific blockchain.
        """
        url = f"{self.api_base_url}/v1/blockchain/{blockchain_name}/data"
        response = requests.get(url)
        return response.json()

    def load_blockchain_data(self, blockchain_name: str):
        """
        Load blockchain data into the DataFrame.
        """
        blockchain_data = self.fetch_blockchain_data(blockchain_name)
        self.data = pd.json_normalize(blockchain_data)
        print(f"Data loaded for blockchain: {blockchain_name}")

    def analyze_blockchain(self):
        """
        Analyze blockchain data.
        """
        if self.data.empty:
            raise ValueError("Data is not loaded.")
        
        blockchain_name = self.data['blockchain_name'].iloc[0]
        total_transactions = self.data['total_transactions'].iloc[0]
        avg_block_time = self.data['avg_block_time'].iloc[0]
        
        print(f"Blockchain Name: {blockchain_name}")
        print(f"Total Transactions: {total_transactions}")
        print(f"Average Block Time: {avg_block_time}")

    def plot_blockchain_data(self):
        """
        Plot blockchain data.
        """
        if self.data.empty:
            raise ValueError("Data is not loaded.")
        
        time_series = self.data['timestamp']
        transaction_series = self.data['transactions']
        
        plt.figure(figsize=(10, 6))
        plt.plot(time_series, transaction_series, color='blue', alpha=0.7)
        plt.xlabel('Time')
        plt.ylabel('Transactions')
        plt.title('Transactions Over Time')
        plt.grid(True)
        plt.show()

    def generate_report(self) -> Dict[str, Any]:
        """
        Generate a report on the blockchain data.
        """
        if self.data.empty:
            raise ValueError("Data is not loaded.")
        
        blockchain_name = self.data['blockchain_name'].iloc[0]
        total_transactions = self.data['total_transactions'].iloc[0]
        avg_block_time = self.data['avg_block_time'].iloc[0]
        avg_transactions = np.mean(self.data['transactions'])
        
        report = {
            'blockchain_name': blockchain_name,
            'total_transactions': total_transactions,
            'avg_block_time': avg_block_time,
            'average_transactions': avg_transactions
        }
        
        return report

# Example usage
if __name__ == "__main__":
    api_base_url = 'https://api.example.com'  # Example base URL
    chain_analytics = ChainAnalyticsPro(api_base_url)
    
    # Load data for a specific blockchain (example blockchain name: 'Bitcoin')
    chain_analytics.load_blockchain_data(blockchain_name='Bitcoin')
    
    # Analyze blockchain data
    chain_analytics.analyze_blockchain()
    
    # Plot blockchain data
    chain_analytics.plot_blockchain_data()
    
    # Generate and print a report
    report = chain_analytics.generate_report()
    print("Blockchain Data Report:")
    for key, value in report.items():
        print(f"{key}: {value}")
